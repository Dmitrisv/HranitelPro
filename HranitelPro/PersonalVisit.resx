<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAI8AAACBCAIAAAB2C360AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAO
        wgAADsIBFShKgAAAEhVJREFUeF7tnflTG0cThr//v1KpJE5VsBOuMuAiYEIQl4KwTLiPAIaABEgc5jS3
        CFeI7XzP7ruMNwJjDNrL7PvDVG9P70xPv9NzwBr/768Y0UExW+vr6wsLC1kbc3NzEmL4htnZWcpMJgML
        m5ubhULh6OjI4cbN1sHBAaadnZ2tra2pVCqZTHZ0dCB0xfARL168IOy//fZbW1sbXEDb4eGhw5CbreXl
        5fb29omJidPT04uLi/fv3799+/bfGP7in3/+effuHfE/OTkZHR399ddfWe2Oj4/F0Qe2/vjjD7IKO94R
        VTFb/oPIn52dEXmIAE1NTdPT0w5DbrbIqu7ubnF7fn7Oa+Dvv/92monhCwg+QFD8yZ+ZmRmHITdbY2Nj
        rJXGmhKqJMfwEyQMPBF5yo/mFishJwusZWc4s1uI4R8IvkrQ0tLC0c9hqIgtjiLGOkYYwCnjzz//dBiK
        2Qo5YraihJitKCFmK0qI2YoSYraihJitKCFmK0qI2YoSYraihJitKCFmK0qI2YoSYraihJitKCFmK0qI
        2YoSYraihOixZT7Devv2LYI+MnHq/v0XpQxQUkr4GMw3d86zDWloREKoED228MeQQbgloD89Pd3d3V1d
        Xc1kMn19fW1tbfX19TU1NdXV1ZWVlZR1dXUNDQ3o+/v7GfPKysrOzo6+1qMRMUepz/GQ1WyoED22RBVh
        lUASbG5ujo6O9vb2plKp7u7uwcHBubm59fX1w8NDKDRknJyc7O/vo5+ZmcG4q6srmUym0+np6emtrS1o
        o8GLiws1K9npMjSIZG4pmsiEvr29vampiXRZWFjY29sz4QZi1P2WG9ADzfl8fmxsTJ/4b2xs8Aqg9ujo
        SC+GCpFki4ASTZLj6dOn+hoSDSuYNhsY0tYle2BT4OQipYGGBm3Hx8dTU1O1tbU9PT20rNdDuHVF8pSR
        y+USicTLly9Z67TxOHWX66QELKm66r+xoRTISMqDgwOSrLGxcWlpCe5lHCqEmi11bYXz0gf2oeHhYZY+
        1j2lC0pYcdsAtywYjW14Ta2U0DY/P0/7bIT0Jb2bXds8MISaLYVJQOYI9/z584GBAQRHa/vmzq07Q62p
        x+3tbU4r5Bk7mRKUkipNC+eFIBABtpRDMFRRUZHNZhUyNKrF7P4eqkESi8Z5pEdWwqGhISbHmzdv9M81
        RJjsg0J42aJfBQihUChwW1pcXJSGaMorRbkkHtII0FRQL+DVq1cEiN5RyqwkeXxnhH3fImTceTmmT05O
        EkQpTRUolXtqkFIgz0gpMozbW2dnJ4SpO8c6IIQ6t5jIbPWc/ViU9CMGoJhSujNMr9wZalAtAyWQuuBA
        z7H+999/55RvqoJCqHOLCU5KpdNpztZao+RMkQBs83uB9t1dwIrY4pFLdzKZzGQyUso+EISFLYVGgv69
        LP2yw7MK5fN5PVp2XuJqF2jwh0nDhYFT4v7+vpSqFXgs0niHsLClXuyBOwJLHz6kUinII15EDdi2/gE3
        lF440NraSnopBanCGVXJ0h+EKLcUGgkwxKWnubl5aWnJYsnmyefQALlECZaXl7mBkV7IqpKrguy9Rohy
        S5QoBMzlqakpdguCBXiUG77FRaA7YFhJJBKzs7OSpcQGAcjea4TolKFZrJFzFMSz169fu6sQfHNGoDvT
        L2D34r6Mh8gqqTKCDwgFW3QBoISRAzSrq6tch620soFGW5dt7is0fFZm7Vjl5eWHh4eqAvLcefAeIVoJ
        jQArHNw5g+lRGpWy8Q3qVNOFkseurq7x8fGzszPLrUuXEGxzzxEWthi2Rq4TF+eLXC5n1wQMOQZsdt5n
        s9nGxkbpeVQpSx8QutzSRC4rK8MHaQIEXrmBhpvyo0ePmFKOylaq9AFhYQuYkROLb775xrd+b8BVH9B8
        9dVXHIIkqyTD7ErPESK2zGqzs7NTXV3taMMBBUGs/PDDDwcHB2YN9HMxDF1ugZWVFQ7KWhIDB14JyFoA
        q6qq9FtK8SQK/UGI2BLobmlpqb6+3ud+rwU+6CioUsQ8ffqUi6CockOveIpQsGVGq6Bsbm4yf1UVLOSY
        oEfKx48f4yGyIUyC/Ya3CBdbKtkVnjx5YteEAm7fwHfffbe/v1+UW6ryGmFcCS8uLjjB6/cmbthh8dUZ
        QZ2q9/Pz82+//Rbf3EpgG3qO0J0ydDvmTLi1tWWr/wPfnLkKJdP6+npFRQWPyMDsZ5Qy8xQhYktjJrGQ
        U6nU2NiY9IEDrwyGh4cVFnlLKRt/EDq2VObz+ebmZgTgVAcH4wZ539DQwJHVrfQT4VoJ1RfLCw5wUNav
        taQMBOqaUjl0enpaXl6u7JdepQQfEAq2NGBllTRnZ2d9fX2Tk5PIkEeVao2BP6A73YgpcWN0dDSdTvvs
        gxshyi3FBUHcLCwstLa24olqtZ9L9hN4oulSKBSePXu2sbHhVASBMOaWlhp86O7uHh8fN3rZWC/4Bcut
        S4yMjOirQqcuCISCLTgQDepLj8i5XK69vZ3LMspAcks9Uu7u7v7yyy8rKyv+++BGiFZCUEQJbjCdOcq7
        b6Oq8gd0h0v0jhs9PT0nJydORUAIC1v0YuCobCW3Udzg0EzU0CgFfQMOsCxnMpnOzs43b97Y3vk6XYoQ
        LracBxs8cu4A+IeX0HbVQJoi/W2gxVayeR2NZM0MaTY3N+l9dnYWOZDV2I1wrYRFUIAgTP9hEdcdgD/o
        dRWj6nMjyLvAebBHRwuCqVLJLYItk+3q1atXLIamNkCEnS0BH1iLOHGYj40E2Ui4JYw9AgxJCZDhHsEY
        EISOjo4XL15I764KCqFmi64BMWJqk0y9vb3MdJYmBdqkF6Xzwu2gNq2mL2Fl1uVH3RjQ5traGqHp7+9X
        +qqkR0o1EggiwBaREj0k1szMDEk2OjrKo2rFJYLzzi3Au7yFoGZ5lxIm1BHC0NBQIpGYnJw0CyDARo9q
        JBCEmi3BOIBAKMktQsmqqEOaoiyDW0IMIYhmQAsS9vf3iUgymdzb20N5fn4uelSLQHdWEwEh7LllT2tr
        XpsQA2R2/qqqKlKN8Cmgt4cVeNegOEpMT09z82Xde/LkCTLtmxlA43Qhe/dbgSAsbNmkONuGKYGUAjKB
        E23IGxsbLS0tz549Y8na3t5mnbSauLS3W/0Ao5QAlCUcMqempmpqah49elRWVtbQ0DAyMrK8vAyF7rsw
        nZqWlYimLwmOnccIBVsasxm55rXRKFKA+B4dHa2urs7NzY2NjbG7cGCrra39+uuvOX1wxMdnAl0oFJRw
        vA5M+0ZD7e7ubi6X42KQTqfZCHt6erjPMWpK2GLgtEyDEHl4eKgXaUeeyDcakRIYwWuEiC0jExQEE3FK
        LVZsJ42NjcR3YGBgfHycZXB+fj5vgz0MGZ85N7KrPX/+PJVKDQ4OomF4mUyGUn9nTX/Fq7W1lXZoZHFx
        ET5EA6UE9jP2Ld6iIw7xfX19bJb4o6zCN8zkqtwDluveIxRsacBA4QBm5pIoTPPy8nKiBiucAtj5qSVe
        GPCKHWELaof18Pj42KTO8PAweUMLlKQjBCwtLUEtA8SSduz+rRcpaUQCbiDQPn3BJXskSyWN0DIrJwYs
        kloALF/9SiwQln3LRJwoCFtbW0zq+vp6oqwfYcgTmZlHyZTE13DsBnpeoUG7hw9HlSJIbwwoJeh1so1M
        raysJKHZI8UlpWC97wtCtBIKPJIZhAbPKJnaqjWl7M0jEBN2S05TlGiMvWCZXoIq1RbZ0JQ0bqCXwARi
        CWU/41zDzADGXq97Db/ZskdtNcgg3RqAhhCz/XAw01YhAyAD5+HSJcqrkbLsrnNYesFRXQfHwoYejdKu
        t3ZTFmSixhbIoVQ3NtlQalAmQUuOANhSiIESAoESJYHgPMbpbm1tTT8PtN8IHXCMjCc+P//8M7sg6YXn
        1nhs8EgpMwklRABsmanHICl5ZITsTJwjOK2xgcMcsM3DC3zWv67Qj8HQMMNUhfMWUR7MNr/ZAhqJqJLM
        SQ+qurq66NcknAxCCHiixE9Y4X7W1tbGum3+zhq1mn+2bYkRAFvKG42HkruU/uyV/k6Z2AotVQJ+ahRA
        f96I6x3ne4ZDuCjNQEqLYPYtBK31LIBDQ0NQRY+arVRpbnox2pLADMGUrA3cxjgcyW2AjUr7jZIhmNwy
        4+Eu1dzczKxEqY4oJSgWoYX81FgomXz9/f11dXVSKsmAY10iBJBbKhnP8vJydXV14B8SlQrQRsTS6bQ5
        KDFMSqoQhHuu8H6zBUkCy/1PP/20uLiIsrRdBAJxc35+3t7ezqEDwixyLtdDINpkplfugABWQk66jKq2
        tnZiYgLvNYwvADYp1neiyWRSP+yQRlVF9+i7wW+2GAOJNTg4mEgkNO++DLY0FkbHcLjdc8fP5XLIDJYq
        DAxV9xlvALm1sbFRWVnJaRC/zULh1EUZGoUGNT8/D2Hb29toIMwwhE2U2GINbGpq4igop78YthgCI6JU
        eh0dHfX29pp/5aDDxf2H6TlbuA4QaAewV7W2tuoXskYJbNsIwz0EDW1vb6+rq2t2dlYbmPSqujM8ZEsv
        UuKiZtzBwQG3K336Yp0LLy8lQK98MdCg8vk8Jw7uzsotQBDuM1gP2dI8st22DrI8sgB22H+a1hgAaiml
        +cLAuLq7u1++fOk+EEq4GzzPLeNooVCgwWw2y6N+IQK0AyPYb0QY1w6BoXGtrK6u3tnZQQZOxV3h7b6l
        QwReshRkMhnu+exY6OW6amUZdTCQa8fCqYqVn/Mhg+WRUUt/N3jLlhILcDTSh0pyWm2q6kvirAiakQSh
        pqaGMz3DNBvY3eAhW6KBEqe5MLa1tXHPN62xBlLyeM/pFmZo+JRcMb///ntkoIHfDZ6fMvCPXWp4eDiV
        St25qagDhhoaGkZHR/V4NQ5EyZFuhLenDBHG+YLEWl5efphsKZkWFxfLyspYCQ0xio9CdEt4fsoAq6ur
        LS0t7LcPjS2YYMhEQIIuywiCbIxwG3ibW5TMJi4c+nH7nZuKKBivhqxyc3Ozrq5OX7K6o2EZ3S4ynrPF
        iaiqqurA/rPBzDJVPRwoCCrhicsy6WXXONcYycGzBaBnZWWlsbFRq4Fx7kGBsWu7YuJCVSKRMOf4zw2I
        52xxvjDLoODUPQzYU9SihFAw9vX1ddKL+wxHDxMNY/NJeMsWs+nHH3/kTKjcMv49HIgkBOXTycnJ4ODg
        yMiI2FJMVNrmn4C3bL1+/bq6uloTh1LCg4IZtWgD2WxW37kapcws60/BW7a4Eff19SHcp5EvBqQXKbW7
        u5tOp/P5vGJCefvgeMgWLz5+/Hg/oD/GHQZo4Ahm1FaivXunxZDEkpL9QsIn4SFbnNq5vfO68l1X+ocJ
        0SbwOD09rc+T0Zta2/AT8JAtfGppaUEQT7ard2wqujCjpjSsbG9vs3Xp74wpw8yZ/maUjC33NFHJ2X1m
        ZsZQJSWwzR80iElnZ6eCo4DcMiwlZstiw7bnsaKiYnV11a502JIcg2gM2/jcn52WjC2ZUUrgcFFZWanv
        swRTFQOsrKyQXoeHh5+1nZeGLWODoBVvbm6uvb1dP3GR0m0Wg3nc1NS0tbX1WUtOadi62mV/f/+Y/fdw
        RR60Ud6mqQcCwsJsZk5/1jwuJVvGEiGRSORyOXOTQCPo8YFDoRgaGhoYGGAlvDrXP4ab2Eomk1ioaaAX
        roVqlUaUkFRfX6+vwIE4Qw+keeAgDgQqm82SXgTnhq2rKOzciK5na3x8nNxSiAWtZs5710FUgd3dXdo1
        X3nGcIMoKYzEp6qq6vT09Aa2FE/s2f4xY8Xi3O8wVJRbHR0dmJpUvaFRA/mRz+e5/R0dHUkZ41oQVY7N
        B/b/TaAIXwV6IAoom5ubb8otKMVOHABdvK8FZpRYIiwtLTEFuEyoKoYbhEhRopyYmCC3UCp6VyEzscDa
        pn9F4DDkZouG2traiLhe4M0bqALuWtq9TSI+ZBAucYas8H4M1MqAkDY0NMAWp39x9IEt8oMTCOuhvvrQ
        azcQpirZWM3f6MEDh4kSpUmGa4EBUx8BhoaHh9mb1tbWHIbcbHHNzmQyHFoARqyKgFOihCKwS3Ezp9Qj
        Zh+zjCEQK6JKlBS0j4VLNsQWgaWOS1GhUHAYcrMFqNjY2MAC2jhufhLc9QTJUsa4FsRHUb05UNjIgIPb
        1taWmyrwH7ZihBwxW1FCzFZ08Ndf/wfpEmbf2LvLdgAAAABJRU5ErkJggg==
</value>
  </data>
</root>